// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package twiliovoice

import (
	"net/http"
	"sync"
)

// httpClientMock is a mock implementation of httpClient.
//
// 	func TestSomethingThatUseshttpClient(t *testing.T) {
//
// 		// make and configure a mocked httpClient
// 		mockedhttpClient := &httpClientMock{
// 			DoFunc: func(r *http.Request) (*http.Response, error) {
// 				panic("mock out the Do method")
// 			},
// 		}
//
// 		// use mockedhttpClient in code that requires httpClient
// 		// and then make assertions.
//
// 	}
type httpClientMock struct {
	// DoFunc mocks the Do method.
	DoFunc func(r *http.Request) (*http.Response, error)

	// calls tracks calls to the methods.
	calls struct {
		// Do holds details about calls to the Do method.
		Do []struct {
			// R is the r argument value.
			R *http.Request
		}
	}
	lockDo sync.RWMutex
}

// Do calls DoFunc.
func (mock *httpClientMock) Do(r *http.Request) (*http.Response, error) {
	if mock.DoFunc == nil {
		panic("httpClientMock.DoFunc: method is nil but httpClient.Do was just called")
	}
	callInfo := struct {
		R *http.Request
	}{
		R: r,
	}
	mock.lockDo.Lock()
	mock.calls.Do = append(mock.calls.Do, callInfo)
	mock.lockDo.Unlock()
	return mock.DoFunc(r)
}

// DoCalls gets all the calls that were made to Do.
// Check the length with:
//     len(mockedhttpClient.DoCalls())
func (mock *httpClientMock) DoCalls() []struct {
	R *http.Request
} {
	var calls []struct {
		R *http.Request
	}
	mock.lockDo.RLock()
	calls = mock.calls.Do
	mock.lockDo.RUnlock()
	return calls
}
